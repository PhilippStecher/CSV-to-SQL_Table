//Script decompiler: https://github.com/njames93/GTA-V-Script-Decompiler;
//1.54 Scripts: https://github.com/Sainan/GTA-V-Decompiled-Scripts/tree/master/scripts;
var fs = require('fs');
var Lazy = require('lazy');
const { exit } = require('process');

/* Value to edit: */
var source = __dirname + "/plz_zu_ort.csv";//Your .csv file
var target = "SQLtable.sql";//Outputfile
var begin = 0;//Line to start search
var end = 999999;//Line to end search
var TableName = "city_data";
var TableData = [
    ["osm_id", "int(255) NOT NULL", "int"],
    ["ort", "varchar(255) NOT NULL", "string"],
    ["plz", "int(255) NOT NULL", "int"],
    ["bundesland", "varchar(255) NOT NULL", "string"]
];

var lineReader = require('readline').createInterface({
    input: require('fs').createReadStream(source)//Program start reading 'source'
});

var linecounter = 0;//Lines searched between: 'begin'-'end'
var foundids = 0;//Ammount of found RemoteID's
var foundsearch = false;//Checks if there is even 1 RemoteID found
var arraylist = [];//...

function isNumeric(str) {
    if (typeof str != "string") return false // we only process strings!  
    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
        !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
}

var isInit = false;
Init = () => {
    for (var x = 0; x < TableData.length; x++) {
        arraylist.push([TableData[x][2]]);
    }   

    console.table(arraylist);
    isInit = true;
    return
}

lineReader.on('line', function (line) {
    if (!isInit) {
        Init();
    }

    if (linecounter >= begin && linecounter <= end) {

        var LineArray = line.split(",");
        if (linecounter == 0) {
            console.log(LineArray[0], LineArray[1], LineArray[2], LineArray[3]);
            if (TableData.length != LineArray.length) {
                console.log("Error: TableData Array doesn't match .csv Array")
                exit(0);
            } else {
                console.log("Passed");
            }
            linecounter++;
            return;//Jump the first line
        }



        for (var x = 0; x < arraylist.length; x++) {
            if (arraylist[x][0] == "string") {
                arraylist[x].push("'" + LineArray[x] + "'");
            } else if (arraylist[x][0] == "int") {
                arraylist[x].push(LineArray[x]);
            }
        }

        foundids++;
        if (!foundsearch) {
            foundsearch = true;
        }
    }
    linecounter++;
});

//Output a array to copy in C++->Bruteforce all possible RemoteID's via. trigger_script_event
CreateTableOutput = () => {
    var returnstring = "--\n-- Automatic Table generation...\n--\n\nCREATE TABLE `" + TableName + "` (\n";
    for (var x = 0; x < TableData.length; x++) {
        returnstring += "\t`" + TableData[x][0] + "` " + TableData[x][1];
        if (x != TableData.length - 1) {
            returnstring += ",\n";
        } else {
            returnstring += "\n";
        }
    }

    returnstring += ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
    return returnstring;
}

InsertIntoString = () => {
    var returnstring = "INSERT INTO `" + TableName + "` (";

    for (var x = 0; x < TableData.length; x++) {
        returnstring += "`" + TableData[x][0] + "`";
        if (x != TableData.length - 1) {
            returnstring += ",";
        }
    }

    returnstring += ") VALUES\n";


    for (var x = 1; x < foundids; x++) {
        var currentString = "(";
        for (var y = 0; y < arraylist.length; y++) {
            currentString += arraylist[y][x]
            if (y != arraylist.length - 1) {
                currentString += ", "
            }
        }
        if (x != foundids - 1) {
            currentString += "),\n"
        } else {
            currentString += ");"
        }
        returnstring += currentString;
    }

    return returnstring;
}

forSQL = () => {
    var BaseFile = '-- Table generated by WlanKabL\n\nSET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";\nSET time_zone = "+00:00";\n\n';
    BaseFile += CreateTableOutput() + "\n\n--\n-- Data for the Table: " + TableName + "\n--\n\n";
    var theoutput = BaseFile;

    theoutput += InsertIntoString();
    theoutput += "\n\n--\n-- Number of values in table:\n-- " + foundids + "\n--";
    return theoutput;
}

//End of Programm. All lines of 'source' got readed
lineReader.on("close", function () {
    console.log("File searched: " + source);
    if (foundsearch) {
        console.log("Searched Lines: " + linecounter);
        console.log("Searched between: " + begin + " and " + end);
        console.log("Found Values's for Table: " + foundids);
    } else {
        console.log("ERROR: Searchrequest not found!");
        exit(0);
    }

    fs.writeFile(target, forSQL(), function (err) {
        if (err) {
            return console.log(err);
        }
        console.log("The file was saved!");
    });
})